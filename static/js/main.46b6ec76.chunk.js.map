{"version":3,"sources":["utils/API.js","components/TableDataBody/index.js","components/TableDataHead/index.js","components/Nav/index.js","components/TableDataArea/index.js","components/MainHeader/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","TableDataBody","users","undefined","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","TableDataHead","headings","handleSort","id","width","style","onClick","toLowerCase","Nav","props","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","placeholder","onChange","handleChange","TableDataArea","state","order","filteredUsers","heading","setState","sortedUsers","sort","a","b","localeCompare","event","console","log","value","filter","filteredList","item","Object","values","indexOf","API","then","results","data","this","Component","MainHeader","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46b6ec76.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function () {\r\n\r\n        return axios.get(\"https://randomuser.me/api/?results=50\");\r\n    }\r\n};","import React from \"react\";\r\n\r\nfunction TableDataBody({ users }) {\r\n    function formatDate(date) {\r\n        const dateArray = date.split(\"-\");\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const dayArray = dateArray[2].split(\"T\");\r\n        const day = dayArray[0];\r\n        const formattedDate = [month, day, year].join(\"-\");\r\n        return formattedDate;\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {users[0] !== undefined && users[0].name !== undefined ? (\r\n                users.map(({ login, name, picture, phone, email, dob }) => {\r\n                    return (\r\n                        <tr key={login.uuid}>\r\n                            <td data-th=\"Image\" className=\"align-middle\">\r\n                                <img\r\n                                    src={picture.medium}\r\n                                    alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                                    className=\"img-responsive\"\r\n                                />\r\n                            </td>\r\n                            <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                                {name.first} {name.last}\r\n                            </td>\r\n                            <td data-th=\"Phone\" className=\"align-middle\">\r\n                                {phone}\r\n                            </td>\r\n                            <td data-th=\"Email\" className=\"align-middle\">\r\n                                <a href={\"mailto:\" + email} target=\"__blank\">\r\n                                    {email}\r\n                                </a>\r\n                            </td>\r\n                            <td data-th=\"DOB\" className=\"align-middle\">\r\n                                {formatDate(dob.date)}\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            ) : (\r\n                    <></>\r\n                )}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nexport default TableDataBody;","import React from \"react\";\r\nimport TableDataBody from \"../TableDataBody/index\";\r\n\r\n\r\nfunction TableDataHead({ headings, users, handleSort }) {\r\n    return (\r\n        <div className=\"datatable mt-5\">\r\n            <table\r\n                id=\"table\"\r\n                className=\"table table-striped table-hover table-condensed\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        {headings.map(({ name, width }) => {\r\n                            return (\r\n                                <th\r\n                                    className=\"col\"\r\n                                    key={name}\r\n                                    style={{ width }}\r\n                                    onClick={() => {\r\n                                        handleSort(name.toLowerCase());\r\n                                    }}\r\n                                >\r\n                                    {name}\r\n                                    <span className=\"pointer\"></span>\r\n                                </th>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n\r\n                <TableDataBody users={users} />\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableDataHead;","import React from \"react\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#navbarNav\"\r\n                aria-controls=\"navbarNav\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n            >\r\n                <span className=\"navbar-toggler-icon\" />\r\n            </button>\r\n            <div className=\"collapse navbar-collapse row\" id=\"navbarNav\">\r\n                <div className=\"input-group col-8\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\" id=\"\">\r\n                            DOB\r\n                        </span>\r\n                    </div>\r\n                    <input type=\"date\" className=\"form-control\" />\r\n                    <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"search-area col-4\">\r\n                    <div className=\"searchbox\">\r\n                        <form className=\"form-inline\">\r\n                            <input\r\n                                className=\"form-control mr-sm-2\"\r\n                                type=\"search\"\r\n                                placeholder=\"Search\"\r\n                                aria-label=\"Search\"\r\n                                onChange={props.handleChange}\r\n                            />\r\n                            <button className=\"btn\" type=\"submit\">\r\n                                Search\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default Nav;","import React, { Component } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport TableDataHead from \"../TableDataHead/index\";\r\nimport Nav from \"../Nav/index\";;\r\n\r\n\r\n\r\nclass TableDataArea extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: [{}],\r\n            order: \"descend\",\r\n            filteredUsers: [{}],\r\n            headings: [\r\n                { name: \"Image\" },\r\n                { name: \"Name\", },\r\n                { name: \"Phone\", },\r\n                { name: \"Email\", },\r\n                { name: \"DOB\", }\r\n            ],\r\n\r\n            handleSort: heading => {\r\n                if (this.state.order === \"descend\") {\r\n                    this.setState({\r\n                        order: \"ascend\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        order: \"descend\"\r\n                    })\r\n                }\r\n                const compareFnc = (a, b) => {\r\n                    if (this.state.order === \"ascend\") {\r\n                        if (a[heading] === undefined) {\r\n                            return 1;\r\n                        } else if (b[heading] === undefined) {\r\n                            return -1;\r\n                        }\r\n                        else if (heading === \"name\") {\r\n                            return a[heading].first.localeCompare(b[heading].first);\r\n                        } else {\r\n                            return a[heading] - b[heading];\r\n                        }\r\n                    } else {\r\n                        if (a[heading] === undefined) {\r\n                            return 1;\r\n                        } else if (b[heading] === undefined) {\r\n                            return -1;\r\n                        }\r\n                        else if (heading === \"name\") {\r\n                            return b[heading].first.localeCompare(a[heading].first);\r\n                        } else {\r\n                            return b[heading] - a[heading];\r\n                        }\r\n                    }\r\n\r\n                }\r\n                const sortedUsers = this.state.filteredUsers.sort(compareFnc);\r\n                this.setState({ filteredUsers: sortedUsers });\r\n            },\r\n\r\n            handleChange: event => {\r\n                console.log(event.target.value);\r\n                const filter = event.target.value;\r\n                const filteredList = this.state.users.filter(item => {\r\n                    let values = Object.values(item)\r\n                        .join(\"\")\r\n                        .toLowerCase();\r\n                    return values.indexOf(filter.toLowerCase()) !== -1;\r\n                });\r\n                this.setState({ filteredUsers: filteredList });\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getUsers().then(results => {\r\n            this.setState({\r\n                users: results.data.results,\r\n                filteredUsers: results.data.results\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Nav handleChange={this.state.handleChange} />\r\n                <div className=\"data-area\">\r\n                    <TableDataHead\r\n                        headings={this.state.headings}\r\n                        users={this.state.filteredUsers}\r\n                        handleSort={this.state.handleSort}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableDataArea;","import React from 'react';\r\n\r\nexport default function MainHeader() {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Employee Directory</h1>\r\n            <p>View employee directory and search for employee.</p>\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport './App.css';\nimport TableDataArea from \"./components/TableDataArea\";\nimport MainHeader from \"./components/MainHeader/index\";\n\n\nfunction App() {\n  return (\n    <div>\n      <MainHeader/>\n      <TableDataArea/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n"],"sourceRoot":""}